Indexers : An indexer allows an object to be indexed as an array. The class with an indexer behaves similar to a virtual array. Then we can access the instance of such a class using the array access operator '[]'

- Are similar to properties to some extent. 
- Using get and set accessors, we can get or set values for a particular instance of the object
- Unlike properties, they do not have any names, instead are used with the 'this' keyword
- Indexers can be overloaded by providing different index types


Structures in C#:

-is a user defined value type that allows to create a single variable and store multiple related data items.
- are similar to classes but differ in behaviour and usage
- are light weight variables to hold small amounts of data
- they offer better performance as they are allocated in stack memory, hence there is no garbage collection overheads
- are preferred as an alternative to primitive-types

- They cannot be inherited (i.e we cannot derive one struct from another)
- can implement interface methods
- compiler supplies a default constructor to the struct
- structures cannot have empty constructors, only parameterized constructors
- All Data items of the struct have to be initialized before leaving the constructor


Equals vs RefEquals vs == :

Exceptions : are unwanted/unexpected events that stop the regular flow of program.
They indicate the problems in  our application. SystemExceptions are classes that are inbuilt, while Application Exceptions are user defined. Exception is the base class for all exceptions.

Handling Exceptions : is a process to ensure that the program does not terminate, does not expose the code and gives simple meaningful error messages to the user and exits.

try{} - a block of code to identify exceptions. This block is followed by one or more catch blocks

catch{} - a block of code that handles the desired exception

finally{} - is a block of code that executes irrespective of whether there is an exception or not. Hence statements that have to be executed are placed here. (eg. database closing, file closing, object freeing etc..)

throw - a keyword that helps to raise an exception

User Defined Exceptions

1. Create exception class/es
2. Expect exception to occur (in the code)
3. Throw relevant exception object
4. handle the exception







