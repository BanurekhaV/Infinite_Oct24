Strings : is a collection of characters
          Memory is allotted on the heap
          Are predefined reference types
          Strings are Immutable
          Strings have fixed size
          String memory cannot be changed
string str="abc";

StringBuilder : mutable strings


Read only : variables that are declared using readonly keyword
 - They cannot be modified after they are initialized
 - We can initialize readonly variables either at the time of declaration or thru a constructor only
- Constructor initialization has a precedence
 - They are similar to a non-static variable (meaning, it is maintained as a separate copy for each object like a non static member)
 - The normal non static members can be modified, but read only cannot be

Constants : are like readonly (meaning once initialized cannot be modified)
- Unlike read only we have to initialize constant members at the time of declaration itself
- Constant members like static members are available for the entire class and not for each object



OO programming :

Class : is a representation of an user defined type to store data and functionalities to work on the data

Objects : is a real workable instance of the class (Data, behaviour, and state)

This - is a pointer that points to the current object/instance

Constructors :
 -Are special functions of a class
 -They share the same name as that of the class
 -They cannot have any return types
 -They can be overloaded (can have many per class)
 -They are meant to initialize the fields of the class
 -They have to be either public, protected or internal, but cannot be private
 -They are called explicitly at the time of object creation

Destructors : 
 - is a special function of the class
 - it shares the same name as that of the class prefixed with a tilde '~'
 - they cannot be overloaded (only one per class)
 - they cannot be called explicitly
 - they are meant for deallocation of allotted memory

Note : Since the Framework supports Garbage Collection automatically and disposes the unutilized memory, there is no need to explicitly write a destructor

Pillars of OO :
WYSIWYG : 

Encapsulation :  unit of Info. that consists of fields and functions. 

- Is a process of enclosing one or more items within a physical or a logical package. It prevents access to implementation details

-We achieve encapsulation using access specifiers

Abstraction : Giving away only required data, and hiding not required data

Polymorphism : 1. method overloading, operator overloading
               2. overriding

Inheritance : derivation

Note :

 1. Classes are internal by default
 2. All members of the class / structure are private by default


Access Specifiers : define the scope and visibility of a class member. c# supports

 - Private : Accessible only in the class where it is declared
             No access anywhere else

 - Public :  All classes within the assembly or outside the assembly with or without derivation can access public members

- An object of the class where the public members are declared is required 

 - Protected : Accessible to the class and all its derived classes. The derived classes can be in the same assembly or in other assemblies.
 - They are accessed using the derived/sub/child class objects 

 - Internal  : Allows access only within the assembly, and not other assemblies

 - Protected Internal or Internal Protected : Internal to all the derived and non derived classes of the current assembly
 - Protected to all derived classes irrespective of the assembly


