Task : A task is used to implement asynchronous programming. It is an object that typically executes asynchronously on a thread pool, rather than synchronously on the Main thread of the application
- There is a Task Scheduler responsible for starting the task and managing it
- Task Parallel Library (TPL) - a set of public types and API's
- TPL simplifies the process of parallelism and concurrency to applications, there by making the developers job more productive.
- TPL handles partitioning of the work, scheduling of threads on the pool, support, state management, and other low level details 

Tasks          					  Vs              Threads

A task represents asynchronous Operations                   Is used for creating and manipulating flow of work
Tasks can return results				    Cannot directly return values
Tasks can have multiple process happening at the same time  Threads can have only one task at a time

Tasks are higher level concepts than Threads

Async and await : are code markers that help in parallel programming, where a task can keep continuing its work even if it has called another task/function
These keyword offer a convenient way to write async. code that looks similar to sync. code, thereby making it easier to read and maintain


Exception Filters : allows us to specify conditional clause for each catch block

Expression Bodied members : is a feature that simplifies the programming code by creating expression bodies for functions and properties. It is similar to that of lambda expressions

Non Nullable References : It is an attempt to ensure that Objects have valid references, else we have to make it nullable either by using '?' or Nullable<T> type . By default the framework allows null for reference types. if we want to have non nullable references, then we have to enable Nullable option in the property group of the applications project file (.csproj)