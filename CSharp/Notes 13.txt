Lambda expressions
Query expressions
Expressions Trees : Allows us to represent code as data. They are tree like data structures where each node in the expression tree represents operations, variables, constants, expressions, and also other code elements. It is not a compiled and executable code. If we want to execute then we need to convert it into executable IL instructions. On execution the expression tree may return values, or it may just perform an action like calling a method

Only expression trees that represent lambda expressions can be executed. These are known as LambdaExpressions. On compiling these lambda expressions, a TDelegate object is created, and then we can invoke the delegate

Func<int,int,int>Sum(int n1, int n2)=>n1+n2; // lambda Expression to find the sum of 2 nos.

Sum(5,6) // invoking the delegate thru lambda code

public static Expression<Func<int,int,int>> EtreeFromLambda()
{
    Expression<Func<int,int,int>>SumExTree = (int n1, int n2)=>n1+n2;
    return SumExTree;
}


!string.IsNullOrWhiteSpace(Name)? "Welcome, " + Name : null;

Extern Alias : When we have name clashes between 1 or more libraries that are included in a project, then we may avoid the ambiguity by creating extern aliases. (Are alias names given to libraries that have same class names/function names/member names)

Local Functions : If we want to execute some piece of code multiple times within a function, then we can place such codes as inner functions called as local function
 Note : 1. We cannot overload Local Functions
        2. Cannot alter access modifiers such as private, public, protected, internal etc
        3. All variables in the enclosing scope, including local variables can be accessed
        4. Compiler throws a warning, if the parent function does not call the local function

Named and Optional Parameters : public void fn(string s, int I, float f){ }

obj.fn(I=6,f=3.4,s="Hello")  