Dependency Injection : is a process of providing the dependency object to the dependent object via constructor, methods and properties

- DI pattern insists that the dependency object is always interface-based
- Every DI pattern involves 3 types of class:
   a) Client class   : consumer (dependant class)
   b) Service class  : provider (dependency class)
   c) Injector class : aids (injects services into client)

DI Framework sin the market : Unity(Ioc), Castle Windsor, Spring.Net, StructureMap, Ninject etc.

Unity Framework : is a general purpose Inversion of Control container which is extensible open source licenced under Apache 2.0

Resp of the Ioc Container :

Specifies the type of Objects to be created and injected
Registering the types
Resolving concrete types with registered types (implementing types with interface types)

Process of DI using Ioc :
- select the Ioc package and install in the project (tools->nugetmanager->manage nuget for solutions)
   - browse for unity.ioc.framework
- Create Ioc object
- Register the service types
- Resolve the dependencies
- start calling the methods

Layered Architecture : 
1. User Interface (UI)
2. Business Logic - BAL(Business Access layer)
3. Data Layer - DAL (Data Access Layer)


Pros and Cons of DI

Pros : Isolation 
       Explicit definition of dependency class
       Facilitates good design
       switching of implementation is made easy

Cons : Increased number of classes
       Creation of many Interfaces