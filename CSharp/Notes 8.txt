Collections :are specialized classes for data storage and retrieval. 
They can store heterogenous types of data
They are not fixed in size. 
Memory allocations are dynamic
Provide various functionalities for storing, retrieving, manipulating, searching etc..

Common collection classes

1. ArrayList: are collections that can store any data types
2. HashTables: are collections that stores data as a key and value pairs
               - keys cannot be null
               - keys cannot be duplicated
               - keys can be of any data type
               - values can be null or duplicates and any datatype
               - the data in hash table is sorted using a hashing technique, and hence
                   the data will not be either in the inserted order or in a sorted order
3. Sorted List : is similar to that of the Hashtable, except that the collection is in the sorted order of the key.
 
4. Stacks : LIFO
5. Queues : FIFO


Generics : is a way of programming that lets us define type safe classes, methods, properties etc. decoupled with datatypes.
Hence they can provide increased performance and productivity.

We can have class, method, structs, property, indexers, field, constructors etc, as generic.

We can have constraint on generics

Generic Collections :
List : can take both value as well as reference types
Dictionary : is a key value pair based collection, where we need to specify the key and values data types while declaring. It is same as HashTable, except the data is in the inserted order
SortedList :is same as Dictionary, but the data is in a sorted manner
Stacks
Queues

IComparable vs IComparer

IComparable is used to sort user defined datatypes. Is used when we have the complete implementation control.

IComparer :Also used to sort userd defined types. Is used when we do not have direct control on implementation (eg. when we access some class/es from a DLL, or other sources)

IEnumerable<> vs IEnumerator<>

Both the interfaces help to loop thru the collections. But syntactically IEnumerable is short and simple when compared to IEnumerator. Also IEnumerable makes use of IEnumerator only

