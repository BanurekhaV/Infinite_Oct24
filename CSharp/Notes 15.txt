Throws :

return y !=0 ? x %y : throw new DivideByZeroException

Tuples: Is a data structure that contains a sequence of elements of different data types. It can hold objects with its properties, and we dont have to create a separate type for it

Why Tuples : If we wish to have multiple return values from a method, then we can use tuples

Different ways in which we can return multiple values 
1. Using Custom Datatype : Eg student object . We can return multiple values(properties) from a method using a custom object (i.e class). But in some scenarios, we may not need all the date.

2. using Ref and out : We can return multiple values from a method using 'out', but understanding and internal implementations are a bit difficult. out and ref are not allowed with async methods

3. Use Dynamic type : We can return multiple values from a method using dynamic datatype. But from performance point of view, we may not want to use Dynamic types


is operator : is to check the compatibility with other type
   std is obj ? 

as operator is to convert one type to another if possible
  std as obj

Pattern Matching : is a feature that allows testing an expression for the occurrence of any pattern. 
 With pattern matching introduced in C# 7.0, we can do matching as below
  1. type checking (type pattern)
  2. null checking(constant pattern)
  3. comparisons(relational pattern) 
  4. checking and comparing values of properties (property pattern)
  5. object deconstruction(positional pattern)

we can use is as well as switch for patterns

Relational pattern :

Static void Main()
{

Console.WriteLine("Enter Number :");
            int number = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine(GetNumbersSign(number));
Console.Read();
}

public static string GetNumbersSign(int number)
        {
            switch(number)
            {
                case < 0:
                    return "Negative";
                case 0:
                    return "Zero";
                case >= 1:
                    return "Positive";
            }
        }


The above can be rewritten more concisely using a switch expression

public static void GetNumbersSign(int number)
{
  return number switch
   {
      < 0 =>"Negative",
      = => "Zero",
      >= 1 => "Positive"
   };

We can work with relational patterns using 'is'

int n=2;
cw(n is <=10); 
cw(n is >5);

public static void GetMoreDetails(string str)   
{
  if(str is null)
{
  cw("Null string");
}
if(str is {Length:0}
 {
  cw("Empty string"); return; }
}

Iterators : are methods that are used to retrieve elements in a collection
- It used yield return to return the element
- yield break to stop the iteration
- return types of iterator IEnumerable, IEnumerator
- iterator cannot be used in events, instance/static constructors
- yield is not a reserved word, but in combination with return or break statements, they have a special meaning
- cannot use multiple yields

