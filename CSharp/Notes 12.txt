Threads : Threads are defined as the execution path of a program
          They are lightweight processes
          Each thread defines a unique flow of control
          The Thread that executes first is the Main Thread
          The Main Thread is automatically created when the program executes, and this in turn can create child threads to perform a particular job.
          The CurrentThread Property of the Thread class is used to access a Thread.

Important Properties of a Thread :
 - CurrentThread
 - Is Alive
 - Name
 - ThreadState
 - IsThreadPoolThread
 - IsBackGround
 - ManagedThreadID

Functionalities of a Thread :

 - Sleep
 - Join
 - Abort
 - Suspend
 - Resume
 - Start

Life Cycle of a Thread has the below states:
 
- Unstarted
- Runnable
- Running
- Not Runnable
- Dead

ThreadPool : is a collection of threads that can be reused for some task/function/job/activity. We will be able to use the threads from the pool by making use of the ThreadPool static class and a method known as QueueUserWorkItem(WaitCallBack obj). This method tries to allocate thread if available in the pool, else it will callback when available. Till such time the function is put in the queue.

Thread Synchronization : is a mechanism where only one process/one thread is given access to critical/sensitive info/data of the program. All the other threads, process will have to wait until the critical section of the program is free.

Methods to manage Synchronization :
  Blocking Methods
  Locking constructs
  Signalling
  No Block synchronization
 

Class Library : are applications/project types that creates .dll assemblies. They cannot be executed on their own. In order to execute they need a Host (exe)

Extensions Methods : 
          