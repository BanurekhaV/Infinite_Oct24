CSharp : is a modern, general purpose, oo programming language developed by Microsoft
- was developed Anders Hejlsberg and his team during Dotnet framework development

Object Oriented programming : is an architecture for developing an application
  - Encapsulation
  - Abstraction
  - Inheritance
  - Polymorphism
 
All programming constructs are grouped as class and objects

Namespace : Is a logical way of organizing our program
            Is a collection of Classes, Interfaces, Structures, Enumerators, Events, Delegates and also other namespace
            Provides assistance in avoiding name clashes

Data Types : Those that determine the kind of data we want to use
 - are basically either Value Types and Reference Types
Value Types : All integral/fundamental/primitive/systemic data types Eg :(int,char,float,double,long,byte etc..)
- Are those types that can hold the value/data directly
- Are stored in Stack memory

Reference Types : All objects of classes, interfaces, events and delegates 
- Are those types that holds the reference/address of the memory where data/value is stored
- Stored in Heap memory

Literals in C# :
          string
          integer
          real
          null
          character
          boolean 

Data Conversions and TypeCasts : Converting one data type to another data type

Implicit conversions : when the compiler can convert from a lower type to a higher type in a type safe manner and also conversions from derived class to base classes

Explicit conversions : when we as programmers are allowed to convert a higher type to a lower type with a possibility of data loss
                       - can use typecast operators or type conversion functions (ToInt32, ToBoolean, ToDateTime etc..)

sbyte, byte, int, long etc

float,double,decimal

Boxing : When a value type is converted to an reference type

Eg : 
 object o; int n=10;
 o = n;   

UnBoxing : When a reference type is converted to a value type

 Eg : object obj; int n;
   n = (int)obj;

BreakPoints : running a program in debug mode

Operators : Assignment, Arithmetic, Relational, Logical, Bitwise, Misc. (sizeof, typeof etc..)
 Unary : a++ ( a= a + 1) , ++a, --a, a--, **a, a**, //a, a//
 Binary : a + b 
 Ternary : bool b = num == 10 ? true : false
Nullables : Generally are unknown information. We can assign normal range of values as well as null values using nullable concept

-Nullable types bridge the differences between C# types and the database types.

-Transformation of nulls and non nulls

Null Coalescing (??) operator can minimize the code and is used to check for null or non null values of any type

Instance members and static members:
  members that are available as a copy to each and every object created are known as instance members. They are always accessed only with the object reference

  members that are not available for each object, but only one copy exists for the entire class are static members. These are managed and maintained by the CLR. They are accessed with the class name. They do not need any objects for calling


Methods and Parameters : methods in c# have parameters of the following type
  - Value  
  - Reference
  - out : every function must return a type. Every function can return only one type. When we expect more than one data from any function, we can make use of output parameter

  - Parameter Array : Supports in providing varying number of arguments to a method separated by a comma
  - params is the keyword that helps in providing a parameter array of values to a method which can be 0,1,or more
  - params keyword should be the last in the method declaration
  - only one params is allowed / method