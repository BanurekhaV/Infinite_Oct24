----------------------------------------------
  --Functions - scalar
  --eg 1
  create function fnDisplayData(@ename varchar(30),@doj date)
  returns nvarchar(100) --specifies what data type, is the function going to return
  as
   begin
     return (select @ename + ' ' + ' Joined on ' + cast(@doj as varchar(12)))
	end

--to execute the function
--we need to specify either a 2 part or 3 part reference/qualification
select infinitedb.dbo.fndisplaydata(ename, hiredate) from emp

select dbo.fndisplaydata(ename,hiredate),job from emp

--eg 2
--write a function that takes employee id and returns the salary

create or alter function fngetSalary(@eid int)
returns float
as
begin
 return (select sal from emp where empno = @eid)
 end

 select empno as 'Employee Number' ,dbo.fngetSalary(empno) 'Employee salary' from emp
  order by sal

--write a function that calculates the Area of rectangle

create or alter function fn_rectArea(@ln int, @bd int)
returns int
as
begin
  declare @area int
  set @area= @ln*@bd
  return @area
  end


  select dbo.fn_rectArea(5,6) [Area of Recatangle]

  --eg 3
  --write a function that calculates the age of a person whose dob is given as an input
  
  create or alter function fn_CalculateAge(@dob date)
  returns int
  as
  begin
  declare @age int
  set @age = datediff(year,@dob,getdate())
  return @age
  end

  select dbo.fn_CalculateAge('10/10/1998') CurrentAge

  
  --inline table valued function
  create function fn_getEmpDetails(@deptid int)
  returns table
  as
   return (select empno,ename,sal,job,deptno from emp where deptno=@deptid)

select * from dbo.fn_getEmpDetails(20)

select ename,sal,job,deptno from dbo.fn_getEmpDetails(20) where job='clerk'

select job, avg(sal)as Average from dbo.fn_getEmpDetails(20) group by job

select job, avg(sal)as Average from dbo.fn_getEmpDetails(20) group by job
having avg(sal)>1000



--multistatement table valued
create or alter function fn_GetEmpByGender(@gen varchar(8))
returns 
@EmpByGender table(
EmpId int, EmployeeName varchar(40),Gender varchar(8))
as
begin
  --bulk insertion
  insert into @EmpByGender
  select empid, empname,gender from tblemployee where gender=@gen
  --handle exception situation
  if @@ROWCOUNT = 0
    begin
	 insert into @EmpByGender values(0,'No Emp found with the given gender',null)	
	 end
   return
end

--to execute the above function
select * from dbo.fn_Getempbygender('female')

select * from @empbygender

-----------------
use Northwind

select * from Customers

create or alter function fn_getCustbyCountry(@country varchar(20))
returns
@CustomerByCountry table(
CustomerID varchar(10),
CustomerName varchar(35),
Country varchar(10))
as
begin
 insert into @CustomerByCountry select
  customerid,contactname,country from customers where country=@country

  if @@rowcount =0 
  begin
   insert into @CustomerByCountry values(' ','No customers found',null)
  end
return
end 

select * from dbo.fn_getCustbyCountry('India')

----Indexes
sp_help sample1

select * from tblemployee order by phoneno

create table Sample1(SampleId int, Samplename varchar(10))

insert into sample1 values(null,'ZZ'),(7,'BB'),(5,'CC'),(10,'DD')
select * from Sample1

--create index
create clustered index idxsampleid on sample1(sampleid)
-- the above only sorts the physical data

--drop an index
drop index sample1.idxsampleid

--unique clustered index ensures no duplicates
delete from sample1 where samplename ='ZZ'

create unique clustered index idxsid on sample1(sampleid)

--only one clustered /table
create clustered index idxname on sample1(samplename)

--non clustered 
--if we create as below, then always only non unique, non clustered index would get created
create index idxsal on tblemployee(salary)

--unique non clustered
create unique nonclustered index idxloc on tbldepartment(deptlocation)

select * from tbldepartment
update tbldepartment set deptlocation='Chennai' where deptnum=4

drop index tbldepartment.idxloc

--filtered index
select * from emp
create index idxsalary on emp(sal) where sal >1600

select * from emp where sal between 2500 and 5000

----Views
--eg 1: single table view
drop view vwempdata
create view vwEmpdata
as select empid,empname,salary,phoneno from tblemployee

sp_helptext vwempdata

select * from vwempdata

insert into vwempdata values(300,'Infinite',7000,99999999)
update vwempdata set empname ='Harsh' where empid=300
delete from vwempdata where empid=300
--all dml operations are successfull thru the view
-- when the underlying table can take null values for the other coulmns not in the view
-- when the view is based on just 1 table

create view vwEmpByDept
as select empid,empname,salary, tbldepartment.deptname from tblemployee join tbldepartment
on tblemployee.deptid = tbldepartment.deptnum

select * from vwEmpByDept

insert into vwempbydept values(300,'Keerthi',6000,'Purchase')
update vwEmpByDept set deptname ='Admin' where empid=100

select * from tbldepartment
select * from tblemployee



