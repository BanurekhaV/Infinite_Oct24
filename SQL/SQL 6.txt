----------------------------------------------
  --Functions - scalar
  --eg 1
  create function fnDisplayData(@ename varchar(30),@doj date)
  returns nvarchar(100) --specifies what data type, is the function going to return
  as
   begin
     return (select @ename + ' ' + ' Joined on ' + cast(@doj as varchar(12)))
	end

--to execute the function
--we need to specify either a 2 part or 3 part reference/qualification
select infinitedb.dbo.fndisplaydata(ename, hiredate) from emp

select dbo.fndisplaydata(ename,hiredate),job from emp

--eg 2
--write a function that takes employee id and returns the salary

create or alter function fngetSalary(@eid int)
returns float
as
begin
 return (select sal from emp where empno = @eid)
 end

 select empno as 'Employee Number' ,dbo.fngetSalary(empno) 'Employee salary' from emp
  order by sal

--write a function that calculates the Area of rectangle

create or alter function fn_rectArea(@ln int, @bd int)
returns int
as
begin
  declare @area int
  set @area= @ln*@bd
  return @area
  end


  select dbo.fn_rectArea(5,6) [Area of Recatangle]

  --eg 3
  --write a function that calculates the age of a person whose dob is given as an input
  
  create or alter function fn_CalculateAge(@dob date)
  returns int
  as
  begin
  declare @age int
  set @age = datediff(year,@dob,getdate())
  return @age
  end

  select dbo.fn_CalculateAge('10/10/1998') CurrentAge

  
  --inline table valued function
  create function fn_getEmpDetails(@deptid int)
  returns table
  as
   return (select empno,ename,sal,job,deptno from emp where deptno=@deptid)

select * from dbo.fn_getEmpDetails(20)

select ename,sal,job,deptno from dbo.fn_getEmpDetails(20) where job='clerk'

select job, avg(sal)as Average from dbo.fn_getEmpDetails(20) group by job

select job, avg(sal)as Average from dbo.fn_getEmpDetails(20) group by job
having avg(sal)>1000



--multistatement table valued
create or alter function fn_GetEmpByGender(@gen varchar(8))
returns 
@EmpByGender table(
EmpId int, EmployeeName varchar(40),Gender varchar(8))
as
begin
  --bulk insertion
  insert into @EmpByGender
  select empid, empname,gender from tblemployee where gender=@gen
  --handle exception situation
  if @@ROWCOUNT = 0
    begin
	 insert into @EmpByGender values(0,'No Emp found with the given gender',null)	
	 end
   return
end

--to execute the above function
select * from dbo.fn_Getempbygender('female')

select * from @empbygender

-----------------
use Northwind

select * from Customers

create or alter function fn_getCustbyCountry(@country varchar(20))
returns
@CustomerByCountry table(
CustomerID varchar(10),
CustomerName varchar(35),
Country varchar(10))
as
begin
 insert into @CustomerByCountry select
  customerid,contactname,country from customers where country=@country

  if @@rowcount =0 
  begin
   insert into @CustomerByCountry values(' ','No customers found',null)
  end
return
end 

select * from dbo.fn_getCustbyCountry('India')

----Indexes
sp_help sample1

select * from tblemployee order by phoneno

create table Sample1(SampleId int, Samplename varchar(10))

insert into sample1 values(null,'ZZ'),(7,'BB'),(5,'CC'),(10,'DD')
select * from Sample1

--create index
create clustered index idxsampleid on sample1(sampleid)
-- the above only sorts the physical data

--drop an index
drop index sample1.idxsampleid

--unique clustered index ensures no duplicates
delete from sample1 where samplename ='ZZ'

create unique clustered index idxsid on sample1(sampleid)

--only one clustered /table
create clustered index idxname on sample1(samplename)

--non clustered 
--if we create as below, then always only non unique, non clustered index would get created
create index idxsal on tblemployee(salary)

--unique non clustered
create unique nonclustered index idxloc on tbldepartment(deptlocation)

select * from tbldepartment
update tbldepartment set deptlocation='Chennai' where deptnum=4

drop index tbldepartment.idxloc

--filtered index
select * from emp
create index idxsalary on emp(sal) where sal >1600

select * from emp where sal between 2500 and 5000

----Views
--eg 1: single table view
drop view vwempdata
create view vwEmpdata
as select empid,empname,salary,phoneno from tblemployee

sp_helptext vwempdata

select * from vwempdata

insert into vwempdata values(300,'Infinite',7000,99999999)
update vwempdata set empname ='Harsh' where empid=300
delete from vwempdata where empid=300
--all dml operations are successfull thru the view
-- when the underlying table can take null values for the other coulmns not in the view
-- when the view is based on just 1 table

create view vwEmpByDept
as select empid,empname,salary, tbldepartment.deptname from tblemployee join tbldepartment
on tblemployee.deptid = tbldepartment.deptnum

select * from vwEmpByDept

insert into vwempbydept values(300,'Keerthi',6000,'Purchase')
update vwEmpByDept set deptname ='Admin' where empid=100

select * from tbldepartment
select * from tblemployee


--triggers

create trigger trgEmpIns
on tblemployee
for insert
as
begin
  select * from inserted
  select * from tblemployee
  end

  --for the trigger to fire
  insert into tblemployee values(300,'Harsha','Male',5600,2,567834567)

  create or alter trigger trgEmpDel
  on tblemployee
  for delete
  as
   begin
   select * from deleted
   end

   set implicit_transactions on

   delete from tblemployee where empid in(200,300)

   rollback 
   select * from tblemployee

--eg 3
create or alter trigger trgupdEmp
on tblemployee
for update
as
begin
 select * from deleted
 select * from inserted
 declare @oldsal float
 declare @newsal float
 select @oldsal = salary from deleted
 select @newsal = salary from inserted
 if(@newsal> @oldsal)
  begin
     print 'emp salary has been upgraded'
  end
   else
    begin
	 print 'Emp salary decreased'
  end
  end

  rollback


 update tblemployee set empname='Banu', salary=5000 where empid=200

--dropping triggers
 

--triggers that can restrict dml operations
create or alter trigger trgNoChanges
on tbldepartment
for insert,update,delete
as
 begin
  Select 'Permission denied.. Contact Admin'
  rollback
  end

  insert into tbldepartment values(100,'Century','Earth')
  select * from tbldepartment


  create table AuditLogs(msg nvarchar(max))

  --let us create a trigger that records the logs on every new employee addition

  create or alter trigger trgAuditInsert
  on tblemployee
  for insert
  as
  begin
   declare @id int
    select @id= empid from inserted

	insert into auditlogs  
	values('New Employee with Emp Id ' + ' ' + cast(@id as varchar(5))  + ' is added at '
	+ cast(getdate() as varchar(20)))
	end


insert into tblemployee values(115,'Durgasai','Male',5700,3,1234567)

select * from auditlogs

--exercise 
/* add a column AuditDate date to the auditlogs table
write a trigger for updation of tblemployee */

alter table auditlogs add auditdate date

create or alter trigger trgExercise
on tblemployee
for update
as
 begin
  declare @id int, @olddept int, @newdept int
  declare @oldempname varchar(30),@newempname varchar(30)
  declare @oldSal float, @newsal float

  --declare a variable to build the audit string
  declare @auditdata varchar(max)
  select * from deleted
  select * from inserted
  --store the inserted data into  temporary table('#') or can use inserted table ittself
  select * into #temptable from inserted
  --loop thru all the updated records incaes we have updated many records
  while(exists(select empid from #temptable))
   begin
    set @auditdata = ' '

	--let us select the first row of the temporary table
	select top 1 @id=empid,@newempname=empname, @newsal=salary,
	@newdept=deptid from #temptable

	--let us also select the data from the deleted
	select @oldempname=empname, @oldsal=salary,@olddept=deptid from deleted where  empid=@id

	set @auditdata = 'Employee with ID : ' + cast(@id as varchar(5)) + ' changed ' 

	--if old data is updated with new data, we should track
	if(@oldempname <> @newempname)
	 begin
	  set @auditdata = @auditdata + ' the Name from ' + @oldempname + ' to ' + @newempname
	  end
	  --for salary changes
	  if(@oldsal <> @newsal)
	   begin
	    set @auditdata = @auditdata + ' Salary from '+ cast(@oldsal as varchar(10)) + 
		 ' to ' + cast(@newsal as varchar(10))
		 end

		 --for dept
		 if(@olddept <> @newdept)
		  begin
		   set @auditdata = @auditdata + ' Department from '+ cast(@olddept as varchar(10)) + 
		 ' to ' + cast(@newdept as varchar(10))
		 end

		 --now the entire audit string is ready , and we can insert the data
		 insert into auditlogs(msg,auditdate) values(@auditdata, getdate())
    
	--now we should delete the top row, so that the second row becomes top to continue the loop
	delete from #temptable where empid=@id
	end
	end

select * from tblemployee where gender ='Female'
update tblemployee set salary=salary+100 where gender='Female'  -- multiple row updations

update tblemployee set empname='NewComer', deptid=15 where empid=200  --single row updation, but multiple columns

select * from auditlogs

rollback
