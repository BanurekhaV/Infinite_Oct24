Selection
Projection
Join
Union
Difference
Divide

Alias
Computational
Top Record and percentages
Arithmetic Operators  +,-,*,/
Relational Operator <>,!=,=,<,>,<=,>=
Logical - not, and, or

     Delete                                Truncate                              Drop

1.  Is a DML Command                       Is a DDL Command                    Is a DDL command
2.  Can apply where predicate              Cannot apply any predicates         Operates on the objects at schema level
3.  Rollback deletion                      Cannot be Rolled back
4.  Is slower than truncate                is faster
5.  Retains the structure                  Retains the structure


Truncated details with data can be rolled back as a part of a transaction using
  1. Log files, Back up files, or sys tools -sql recovery tool

Rules of precedence

1. Arithmetic
2. Concatenation
3. Comparison
4. Is[not] null, like, not [in]
5. [not] between
6. Not , And, Or

to override the above precedence, use parenthesis ()

--sorting the output using order by
 - sort by multiple columns
 - sort asc, or desc
 - sort by alias name
 - sort by a column that is not in the select list

--grouping ( on columns whose values repeat)
- dividing the tuples of a relation into sub sets/smaller data sets
- we can apply group by clause on columns that are not in the select list (may not get meaningful results which convey the status)
- we may have to group by on all columns in the select list except the aggregates
- we cannot group by on alias names

Having clause restricts no. of groups, where as where restricts no, of rows

SQL statements order of execution :
  from
  where
  group by
  having
  order by
  select


Joins : are conditions that are applied in a where clause

Joins are of various types :
  Equi /Natural
  Non Equijoin  
  Self join
  Cross Join
  Inner Join
  Outer Joins

Sub Queries : are nested queries that gets executed once before handing over the details to the 
outer query/main query

Guidelines for sub query
 - Enclose subquery in parenthesis
 - Place the subquery on the right hand side of the comparison operator
 - Use single row operators with single row subqueries and multi row operators with multi row subqueries

Single row -operators : =, < ,>, <>, >=, <=
Multi row operators :
 in  - Equal to any member in the list (sub query list)

 any - Compare value to each values returned by the subquery. 
       If any one matches with the list
       Can be used in conjunction with the single row operators

 all - Compare value to each values returned by the subquery. 
       If the values matches all data in the list
       Can be used in conjunction with the single row operators

--group by in subqueries

--exists / not exists operator :
  - test for existence of rows in the result of the subquery
  - if found, the search stops and the inner query returns true
  - if not found, then inner query returns false, and continues to search the rest of the rows

--Exists/not exists is equivalent to 'in' and 'not in'. But these operators involve data retrieval, where as exists will not

Corelated Sub Query : is a way of reading every row in a table and comparing values in each row against the  related data

- 



