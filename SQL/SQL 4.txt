--set commands
create table utable1(uid int identity, uname varchar(20),ugrade char(1), upercentage int)

insert into utable1 values('Sriteja','A',85),('Manisha','A',80),('Nikhil','B',65),('DurgaSai','B',60)

create table utable2(uid int identity, uname varchar(20),ugrade char(1), upercentage int)

insert into utable2 values('Hari','A',85),('Prakruthi','A',82),('Sainaga','B',65),('Mohit','B',60)

select * from utable1
select * from utable2

--union
select uname,ugrade, upercentage from utable1
union all
select uname,ugrade, upercentage from utable2

update utable2 set uname='Sriteja' where uname='Hari'

--intersect
select uname,ugrade, upercentage from utable1
intersect
select uname,ugrade, upercentage from utable2

--except
select uname,ugrade, upercentage from utable1
except
select uname,ugrade, upercentage from utable2

--for except
create table empdata(ID int identity, Ename varchar(20),Age int, City varchar(20))

insert into empdata values('Hemanth',22,'Chennai'),('Suchitha',22,'Bangalore'),('Pavan',23,'Vizag')

Create table Bonusdata(BId int, Eid int, BonusAmt int)

insert into Bonusdata values(100,4,5000),(111,3,8000),(121,2,6000)

select ID, Ename, bonusamt from empdata left join Bonusdata on empdata.ID = Bonusdata.Eid
except
select ID, Ename, bonusamt from empdata right join Bonusdata on empdata.ID = Bonusdata.Eid

--CTE
with firstcte(EmployeeName, AnnualSalary, Department)
as (select empname,(salary *12), tbldepartment.Deptname from tblEmployee join tblDepartment
on tblEmployee.DeptId = tblDepartment.DeptNum)

--main query 1
--select * from firstcte

--query 2
select department, avg(annualsalary)'Dept salary' from firstcte
group by department having avg(annualsalary)>64000


--eg 2 multiple cte's
with cte1 as(select * from tblemployee),
cte2 as(select * from tblDepartment)

--main query
select cte1.empname,cte1.salary,cte2.deptname from cte1 join cte2 on cte1.deptid=cte2.deptnum
and cte1.Salary > 5300

--eg 3. dml operations with cte
with dmlcte(DepartmentNumber,DepartmentName,NewLocation)
as(select deptnum,deptname,Deptlocation from tblDepartment)

--insertion
--insert into dmlcte values(10,'New Dept','Cochin')

--updation
update dmlcte set NewLocation= 'Navi Mumbai' where DepartmentNumber=10
select * from tblDepartment


--recursive cte's
with cte_week(n,wkday)
as(select 0,DATENAME(dw,0)
union all
select n + 1, datename(dw,n+1) from cte_week where n < 6)

select n,wkday from cte_week
select datename(dw,getdate())

--Hierachial queries with recusrive cte
with ourcte(EmpNo,Ename,MGR,EmpLevel)
as(select empno,ename,mgr_id, 1 EmpLevel          -- initial subquery
    from Emp where mgr_id is null
union all
select e.empno,e.ename,e.mgr_id,oc.emplevel + 1   -- recursive
from emp e inner join ourcte oc on e.mgr_id=oc.empno
where e.mgr_id is not null)

select * from ourcte
order by EmpLevel


--stored procedures
create procedure sp_welcome
as
begin
 select 'Hello and Welcome to SQL procedures'
 end

 --to execute the procedure
 --1. execute procedure name
 --2. exec procedure name
 --3. procedure name
 execute sp_welcome
 exec sp_welcome
 sp_welcome

 sp_helptext sp_welcome

 --eg 1
 create procedure sp_empdata
 as begin 
 select * from emp where deptno=20
 end

 sp_empdata

 --eg 2
 create or alter proc sp_delemp
 as
 begin
 select * from tblemployee
 insert into tblemployee values(200,'Banurekha','Female',5200,5,6690007)   -- hard coded values
 select * from tblemployee
 delete from tblemployee where empid=200
 select * from tblemployee
 print 'Record deleted on ' + cast(getdate() as varchar(12)) 
 end

 sp_delemp

 --eg 3. Procedures with paramenter
 create or alter proc sp_wish @name varchar(20)   -- parameterized proc
 as
 begin
 select concat('Hello ' ,@name)
 end

 sp_wish 'Somasekhar'

 --eg 4. find all employees who work for an given deptid
 create or alter proc sp_getEmpDept(@deptid int)
 as
 begin
  select * from emp where deptno = @deptid
  end

sp_getEmpDept 30

--eg 5. get the name of the dept where a given employee works
create or alter proc sp_getdeptname(@eid int)
as
begin
 select dname from dept join emp on dept.deptno = emp.deptno and
 emp.empno = @eid
 end

 sp_getdeptname 7566


 --eg 6. increase the salary of the given employee id by 100/-, if the salary is < 1250
 --no permanent updation
 create or alter proc sp_updatesal(@eid int)
 as
 begin
 declare @revisedsal float, @sal float
 declare @ename varchar(20)
 select @ename = empname, @sal=salary from tblemployee where empid=@eid

 if(@sal <5300)
   begin
    set @revisedsal = @sal +100
	print 'salary has been revised from ' + cast(@sal as varchar(5)) + 
	' to ' + cast(@revisedsal as varchar(5))
	end
	else
	 begin
	  print ' Salary is fine'
    end
end

select * from tblemployee where salary <=5300
sp_updatesal 109

--procedures with output
create or alter proc sp_Taxcalculator @eid int, @annualsalary float output
as
begin
 declare @temp float
 select @temp = (salary*12) from tblemployee where empid=@eid
  if(@temp > 64000)
   begin
    set @annualsalary =@temp
	end
	else
	begin
	 print 'No tax levied as annual salary is less than 66000'
	 end
end

--to execute the above proc with output value (option 1)
--declare @salary float
--declare @taxamt float
--exec sp_Taxcalculator 111,@salary output
--set @taxamt = @salary*10/100
--print 'Salary earned is ' + cast(@salary as varchar(8))
--print 'Tax amount to be deducted is ' + cast(@taxamt as varchar(8))

--change the order of procedure execution (option 2)
declare @outsal float, @tax float
exec sp_Taxcalculator @annualsalary=@outsal output, @eid='111'
set @tax = @outsal*10/100
print 'Salary earned is ' + cast(@outsal as varchar(8))
print 'Tax amount to be deducted is ' + cast(@tax as varchar(8))

--given an employee name, get the salary of the employee as an output
create or alter proc sp_getsalary @ename varchar(20), @salary int output
as
begin
 select @salary=salary from tblemployee where empname=@ename
 end

 declare @empsal int
 exec sp_getsalary 'Gowthami', @empsal output
 select @empsal

 --create a procedure that takes an empl no, and outputs the manager name and the emp salary

 --procedures with return type
 --if we need any integer data from a procedure, then we may use the return type

 create or alter proc sp_getLocation @did int
 as
 begin
 return (select deptlocation from tblDepartment where deptnum=@did)
 end

 --to execute proc with return values

 declare @loc varchar(20)
 exec @loc = sp_getLocation 3
 print @loc


 create or alter proc sp_getLocation @deptname varchar(20)
 as
 begin
 return (select deptnum from tblDepartment where Deptname=@deptname)
 end

 declare @deptnumber int
 exec @deptnumber =  sp_getLocation 'IT'
 print @deptnumber


use infinitedb
--procedures with return values 
drop proc sp_totdept

create or alter proc sp_totEmpcount @deptid int
as
begin
 return (select count(empid) from tblemployee where deptid=@deptid)
 end

 declare @totemp int
 exec @totemp = sp_totempcount 2
 print @totemp

 --ex 1: 
 /* create a procedure that takes deptno as input, and outputs the average salary of 
  that department, and also returns the count of employees in that department */

  create or alter proc sp_getavgsalDeptCount(@deptid int , @avgsal float output)
  as
  begin
   select @avgsal = avg(salary) from tblemployee where deptid=@deptid
   return(select count(empid)from tblemployee where deptid=@deptid)
   end

declare @aSal float
declare @totemp int
exec @totemp = sp_getavgsalDeptCount 1, @asal output
print 'Total Employees in the Dept 1 is :  ' + cast(@totemp as varchar(3)) + 
  ' and the dept average is : ' + cast(@asal as varchar(8))