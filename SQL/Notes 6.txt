Functions : are reusable piece of code that is a part of the database schema. Are like procedures
- All functions should return a scalar datatype
- cannot return text, ntext, images, timestamp, cursor etc.
- may or may not take input parameters

Broadly they are of 2 types  :
  1. Scalar
  2. Table Valued : 
      - Inline Table Valued Functions: are functions that return a table(rows, cols)
        - are not enclosed between begin and end statements
        - used in where. join clauses apart from select
        - gives better performance than multi statement valued table functions
      - Multi Statement Table Valued Functions : are functions that can return a structure like table
        - contains begin and end clauses
        - the table like structure can be as per the users requirement

if any given task, can be achieved using inline table valued function, then prefer the same over MSTV functions

Differences between Functions and Stored procesures

- A function must return a scalar value, where as a procedure returns only integer values (if required)
- Functions can have only input parameters, where as procedures can have input, output parameters
- Functions do not support data modifications using dml statements, where as procedures allow data modifications
- Functions cannot support transactions, error handling where as procedures can have transactions and error management
- Functions can call only other functions, where as procedures can call other procedures and functions
- Functions can be used in select, join and where clauses, where as procedures need explicit execute command


Indexes : are mechanisms to sort the physical order of the data in the database

Why indexes ? without indexes, any query/data modifications will cause the SQL engine to search the referenced info in a top- down approach. 

But a single well placed index can shorten the query time from dozens of minutes to less than a second
-Speeds up the data access
-Enforces uniqueness

-They occupy disk space

Indexes are of 3 types : 
1. Clustered Index : 
     -sorts the physical table on every dml operation
     -there can be only one clustered index per table
     -does not need additional space
   clustered index allows duplicate values and unique clustered does not (allows one null)

2. Non Clustered Index :
    -can have many non clustered index per table
    -occupies space in the disk
    -any dml operations does not affect the table, instead only the index table
    -can be either clustered or non-clustered

3. Filtered Index : 
     -is a non clustered index with a predicate
     -used in situations where we need only a portion of the index

Guidelines for Indexing :
  -Columns to Index :
    Primary and Foreign key columns
    Those columns which are frequently searched in ranges
    Those column which are frequently accessed in sorted order
    Those columns which are grouped together during aggregation

  -Columns not to index on :
     Columns that are seldom referenced in queries
     Columns that contain very few data
     Columns that are defined with text, ntext, image etc. data types

When to create index :
   - columns that contain number of null values
   - when the table is large and most queries are expected to retrieve less than 2 to 4% of rows

When not to create index:
   - when the table is small   
   - columns are referred often
   - more than 4% of rows are retrieved as a result of the query
    -creates a separate table called as index table with index column and key to the data page

Views : are relations that is not of the conceptual model, but is made visible to the user as a virtual relation
  - The database will have the definition of views which are virtual or the query expression is stored along with the view name in the database, but no data
  - every time we query a virtual table, the view definition constructs the query using the base table (original tables with data)


Triggers : are reusable piece of code like any procedure or functions of a database
           they are used to enforce/define business rules/constraints
           they are not called for execution, instead will fire automatically on certain events
           they can be before/after/instead of triggers

Magic tables : are temporary tables that get created within a trigger body when it is executed.
               the scope of the magic table is within the execution scope
               they are 2 in  number 
                        1. Inserted Table
                        2. Deleted Table
       all updates are always deletion followed by insertion
             
 

