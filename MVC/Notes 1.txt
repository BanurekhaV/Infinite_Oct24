ASP.Net MVC : is a popular framework for developing web based applications

- is based on Model, View and Controller pattern, that makes it more robust, fast and secure
- it is the next generation technology and it is the successor of ASP.Net webforms
- it is a light weight component
- Designs and codes are neatly separated
- It uses pure HTML controls or HTMl Helpers to generate HTML(No server controls)
-It uses Controller based URL routing
- Implements no view state
- Uses Razor Syntax for customization
- It uses Layouts instead of master pages for consistent look and feel
- It is an Open Source framework

Model : is responsible for keeping database operational logic like connecting and retrieving info from datasources

View : is responsible for serving web pages to the user (UI to client)

Controller : all programming logics are kept here
  - is the main controlling part of MVC
  - It is a mediator between client request and server response
  - Acts like a bridge between view page and models
  - It works with Http request
  - Each browser request is mapped with a particular controller and each controller has several action methods to handle the browser request
  - All controller class must be suffixed with 'Controller' keyword

What is Action methods

-- all public methods written in side the controller are action methods
a) All action methods must be only public
b) Action methods cannot be overloaded
c) Cannot be static 
d) every controller has one default action method called index(), that returns the view page
e) ActionResult is the base class for all the result type action method

The various result types of action methods are:
 1. view result : html and razor
 2. Empty result : no result
 3. RedirectResult : a redirection to new url
 4. JsonResult : result of Jason type
 5. contentresult : a text result
 6. javascript result : 
 7. Filecontentresult: downloadable binary content
 9. filepathresult :downloadable with a path
 10. filestreamresult : downloadable with a file stream


Views : is a folder in the MVC structure which contains .cshtml files, design layouts that are used while rendering web pages
- view folder maintans a separate folder for each controller along with view pages
- View folders name is the same as that of the controller name, and the .cshtml page name is same as the action method name

- allows writing razor syntax, a powerful and easier way of witing the server(web application) code directly on the html based view page
-Razor is a markup syntax
-Uses '@{}' block to write program code
-All inline expressions like variables, functions start with @
-Variables can be declared using the var keyword, and all code terminates with a';'
-string values are given with " "
-Comments innrazor is as
 @*....... *@   -- multiline comments
/*... */
// - single line comment

- to bind the model with the view we use @model 
-@Model helps in accessing the properties of the bound model object

ViewBag, ViewData, TempData : are objects that are used for passing information from controllers to views

ViewBag : Dynamic Data Type
- used to pass data from controllers to views
- has a short life, meaning once the data is passed from controller to the view, it becomes null
- does not require any typecasting

Eg : ViewBag.Mydata ="Data 1";

and to access the data in viewbag in the view page
 @ViewBag.Mydata


ViewData : is a dictionary object that is derived from ViewDataDictionary
- uses key/value pair for storing and retrieving data
- used to pass data from controllers to views
- has a short life, meaning once the data is passed from controller to the view, it becomes null
- requires typecasting for complex data types

Eg :

ViewData["Mydata"]= "Data 2";
and to access in the view page
@ViewData["Mydata"]

TempData : is a dictionary object that is derived from TempDataDictionary
- uses key/value pair for storing and retrieving data
- used to pass data from controllers to views
- internally makes use of session to store values
- We must check for null before using TempData to avoid runtime errors
- TempData can be made alive in subsequent requests by calling TempData.Keep() method
- Has a bigger life than ViewBag and ViewData
- It is generally used to transfer values/data from one controller to another


